<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FastSocket.SocketBase</name>
    </assembly>
    <members>
        <member name="T:Sodao.FastSocket.SocketBase.ConnectionCollection">
            <summary>
            socket connection collection
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.ConnectionCollection._dic">
            <summary>
            key:ConnectionID
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.ConnectionCollection.Add(Sodao.FastSocket.SocketBase.IConnection)">
            <summary>
            add
            </summary>
            <param name="connection"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">connection is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.ConnectionCollection.Remove(System.Int64)">
            <summary>
            remove connection by id.
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.ConnectionCollection.Get(System.Int64)">
            <summary>
            get by connection id
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.ConnectionCollection.ToArray">
            <summary>
            to array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.ConnectionCollection.Count">
            <summary>
            count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.ConnectionCollection.DisconnectAll">
            <summary>
            断开所有连接
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.DisconnectedHandler">
            <summary>
            connection disconnected delegate
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Log.ConsoleListener">
            <summary>
            console trace listener
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.ConsoleListener.Debug(System.String)">
            <summary>
            debug
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.ConsoleListener.Error(System.String,System.Exception)">
            <summary>
            error
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.ConsoleListener.Info(System.String)">
            <summary>
            info
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Log.DiagnosticListener">
            <summary>
            diagnostic listener
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.DiagnosticListener.Debug(System.String)">
            <summary>
            debug
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.DiagnosticListener.Error(System.String,System.Exception)">
            <summary>
            error
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.DiagnosticListener.Info(System.String)">
            <summary>
            info
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Log.ITraceListener">
            <summary>
            trace listener interface.
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.ITraceListener.Debug(System.String)">
            <summary>
            debug
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.ITraceListener.Error(System.String,System.Exception)">
            <summary>
            error
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.ITraceListener.Info(System.String)">
            <summary>
            info
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Log.Trace">
            <summary>
            trace
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.Trace.EnableConsole">
            <summary>
            enable console trace listener
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.Trace.EnableDiagnostic">
            <summary>
            enable diagnostic
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.Trace.AddListener(Sodao.FastSocket.SocketBase.Log.ITraceListener)">
            <summary>
            add listener
            </summary>
            <param name="listener"></param>
            <exception cref="T:System.ArgumentNullException">listener is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.Trace.Debug(System.String)">
            <summary>
            debug
            </summary>
            <param name="message"></param>
            <exception cref="T:System.ArgumentNullException">message is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.Trace.Info(System.String)">
            <summary>
            info
            </summary>
            <param name="message"></param>
            <exception cref="T:System.ArgumentNullException">message is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.Trace.Error(System.String,System.Exception)">
            <summary>
            error
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
            <exception cref="T:System.ArgumentNullException">message is null</exception>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Log.ListenerWrapper">
            <summary>
            trace listener wrapper
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.ListenerWrapper.#ctor(System.Action{System.String},System.Action{System.String,System.Exception},System.Action{System.String})">
            <summary>
            new
            </summary>
            <param name="onDebug"></param>
            <param name="onError"></param>
            <param name="onInfo"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.ListenerWrapper.Debug(System.String)">
            <summary>
            debug
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.ListenerWrapper.Error(System.String,System.Exception)">
            <summary>
            error
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Log.ListenerWrapper.Info(System.String)">
            <summary>
            info
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.MessageProcessHandler">
            <summary>
            消息处理handler
            </summary>
            <param name="buffer"></param>
            <param name="readlength"></param>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.MessageReceivedEventArgs">
            <summary>
            message received eventArgs
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.MessageReceivedEventArgs._processCallback">
            <summary>
            process callback
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.MessageReceivedEventArgs.Buffer">
            <summary>
            Buffer
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.MessageReceivedEventArgs.#ctor(System.ArraySegment{System.Byte},Sodao.FastSocket.SocketBase.MessageProcessHandler)">
            <summary>
            new
            </summary>
            <param name="buffer"></param>
            <param name="processCallback"></param>
            <exception cref="T:System.ArgumentNullException">processCallback is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.MessageReceivedEventArgs.SetReadlength(System.Int32)">
            <summary>
            设置已读取长度
            </summary>
            <param name="readlength"></param>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Packet">
            <summary>
            packet
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.Packet.SentSize">
            <summary>
            get or set sent size.
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.Packet.CreatedTime">
            <summary>
            get the packet created time
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.Packet.Payload">
            <summary>
            get payload
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Packet.#ctor(System.Byte[])">
            <summary>
            new
            </summary>
            <param name="payload"></param>
            <exception cref="T:System.ArgumentNullException">payload is null.</exception>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.Packet.Tag">
            <summary>
            get or set tag object
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Packet.IsSent">
            <summary>
            获取一个值，该值指示当前packet是否已发送完毕.
            </summary>
            <returns>true表示已发送完毕</returns>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.IConnection">
            <summary>
            a connection interface.
            </summary>
        </member>
        <member name="E:Sodao.FastSocket.SocketBase.IConnection.Disconnected">
            <summary>
            disconnected event
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.IConnection.Active">
            <summary>
            return the connection is active.
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.IConnection.LatestActiveTime">
            <summary>
            get the connection latest active time.
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.IConnection.ConnectionID">
            <summary>
            get the connection id.
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.IConnection.LocalEndPoint">
            <summary>
            获取本地IP地址
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.IConnection.RemoteEndPoint">
            <summary>
            获取远程IP地址
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.IConnection.UserData">
            <summary>
            获取或设置与用户数据
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.IConnection.BeginSend(Sodao.FastSocket.SocketBase.Packet)">
            <summary>
            异步发送数据
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.IConnection.BeginReceive">
            <summary>
            异步接收数据
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.IConnection.BeginDisconnect(System.Exception)">
            <summary>
            异步断开连接
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.IHost">
            <summary>
            socket connection host interface
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.IHost.SocketBufferSize">
            <summary>
            get socket buffer size
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.IHost.MessageBufferSize">
            <summary>
            get message buffer size
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.IHost.NewConnection(System.Net.Sockets.Socket)">
            <summary>
            create new <see cref="T:Sodao.FastSocket.SocketBase.IConnection"/>
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.IHost.GetConnectionByID(System.Int64)">
            <summary>
            get <see cref="T:Sodao.FastSocket.SocketBase.IConnection"/> by connectionID
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.IHost.ListAllConnection">
            <summary>
            list all <see cref="T:Sodao.FastSocket.SocketBase.IConnection"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.IHost.CountConnection">
            <summary>
            get connection count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.IHost.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.IHost.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.BaseHost">
            <summary>
            base host
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.#ctor(System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="socketBufferSize"></param>
            <param name="messageBufferSize"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">socketBufferSize</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">messageBufferSize</exception>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.BaseHost.SocketBufferSize">
            <summary>
            get socket buffer size
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.BaseHost.MessageBufferSize">
            <summary>
            get message buffer size
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.NewConnection(System.Net.Sockets.Socket)">
            <summary>
            create new <see cref="T:Sodao.FastSocket.SocketBase.IConnection"/>
            </summary>
            <param name="socket"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">socket is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.GetConnectionByID(System.Int64)">
            <summary>
            get <see cref="T:Sodao.FastSocket.SocketBase.IConnection"/> by connectionID
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.ListAllConnection">
            <summary>
            list all <see cref="T:Sodao.FastSocket.SocketBase.IConnection"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.CountConnection">
            <summary>
            get connection count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.NextConnectionID">
            <summary>
            生成下一个连接ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.RegisterConnection(Sodao.FastSocket.SocketBase.IConnection)">
            <summary>
            register connection
            </summary>
            <param name="connection"></param>
            <exception cref="T:System.ArgumentNullException">connection is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.OnConnected(Sodao.FastSocket.SocketBase.IConnection)">
            <summary>
            OnConnected
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.OnStartSending(Sodao.FastSocket.SocketBase.IConnection,Sodao.FastSocket.SocketBase.Packet)">
            <summary>
            OnStartSending
            </summary>
            <param name="connection"></param>
            <param name="packet"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.OnSendCallback(Sodao.FastSocket.SocketBase.IConnection,Sodao.FastSocket.SocketBase.Packet,System.Boolean)">
            <summary>
            OnSendCallback
            </summary>
            <param name="connection"></param>
            <param name="packet"></param>
            <param name="isSuccess"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.OnMessageReceived(Sodao.FastSocket.SocketBase.IConnection,Sodao.FastSocket.SocketBase.MessageReceivedEventArgs)">
            <summary>
            OnMessageReceived
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.OnDisconnected(Sodao.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            OnDisconnected
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
            <exception cref="T:System.ArgumentNullException">connection is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.OnConnectionError(Sodao.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            OnError
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.BaseHost.SocketAsyncEventArgsPool">
            <summary>
            <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> pool
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.SocketAsyncEventArgsPool.#ctor(System.Int32)">
            <summary>
            new
            </summary>
            <param name="messageBufferSize"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.SocketAsyncEventArgsPool.Acquire">
            <summary>
            acquire
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.SocketAsyncEventArgsPool.Release(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            release
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection">
            <summary>
            default socket connection
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.#ctor(System.Int64,System.Net.Sockets.Socket,Sodao.FastSocket.SocketBase.BaseHost)">
            <summary>
            new
            </summary>
            <param name="connectionID"></param>
            <param name="socket"></param>
            <param name="host"></param>
            <exception cref="T:System.ArgumentNullException">socket is null</exception>
            <exception cref="T:System.ArgumentNullException">host is null</exception>
        </member>
        <member name="E:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.Disconnected">
            <summary>
            连接断开事件
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.Active">
            <summary>
            return the connection is active.
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.LatestActiveTime">
            <summary>
            get the connection latest active time.
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.ConnectionID">
            <summary>
            get the connection id.
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.LocalEndPoint">
            <summary>
            获取本地IP地址
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.RemoteEndPoint">
            <summary>
            获取远程IP地址
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.UserData">
            <summary>
            获取或设置与用户数据
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.BeginSend(Sodao.FastSocket.SocketBase.Packet)">
            <summary>
            异步发送数据
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.BeginReceive">
            <summary>
            异步接收数据
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.BeginDisconnect(System.Exception)">
            <summary>
            异步断开连接
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.FreeSendQueue">
            <summary>
            free send queue
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.FreeSend">
            <summary>
            free for send.
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.FreeReceive">
            <summary>
            free fo receive.
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.OnStartSending(Sodao.FastSocket.SocketBase.Packet)">
            <summary>
            fire StartSending
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.OnSendCallback(Sodao.FastSocket.SocketBase.Packet,System.Boolean)">
            <summary>
            fire SendCallback
            </summary>
            <param name="packet"></param>
            <param name="isSuccess"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.OnMessageReceived(Sodao.FastSocket.SocketBase.MessageReceivedEventArgs)">
            <summary>
            fire MessageReceived
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.OnDisconnected(System.Exception)">
            <summary>
            fire Disconnected
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.OnError(System.Exception)">
            <summary>
            fire Error
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.SendPacketInternal(Sodao.FastSocket.SocketBase.Packet)">
            <summary>
            internal send packet.
            </summary>
            <param name="packet"></param>
            <exception cref="T:System.ArgumentNullException">packet is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.SendPacketInternal(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            internal send packet.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.SendAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            async send callback
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.ReceiveInternal">
            <summary>
            receive
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.ReceiveAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            async receive callback
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.MessageProcessCallback(System.ArraySegment{System.Byte},System.Int32)">
            <summary>
            message process callback
            </summary>
            <param name="payload"></param>
            <param name="readlength"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">readlength less than 0 or greater than payload.Count.</exception>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.DisconnectInternal(System.Exception)">
            <summary>
            disconnect
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.DisconnectAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            async disconnect callback
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.PacketQueue">
            <summary>
            packet queue
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.PacketQueue.#ctor(System.Action{Sodao.FastSocket.SocketBase.Packet})">
            <summary>
            new
            </summary>
            <param name="sendAction"></param>
            <exception cref="T:System.ArgumentNullException">sendAction is null.</exception>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.PacketQueue.TrySend(Sodao.FastSocket.SocketBase.Packet)">
            <summary>
            try send packet
            </summary>
            <param name="packet"></param>
            <returns>if CLOSED return false.</returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.PacketQueue.Close">
            <summary>
            close
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.PacketQueue.TrySendNext">
            <summary>
            try send next packet
            </summary>
            <returns>if CLOSED return false.</returns>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.PacketQueue.CloseResult">
            <summary>
            close queue result
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.PacketQueue.CloseResult.BeforeState">
            <summary>
            before close state
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.PacketQueue.CloseResult.Packets">
            <summary>
            wait sending packet array
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.BaseHost.DefaultConnection.PacketQueue.CloseResult.#ctor(System.Int32,Sodao.FastSocket.SocketBase.Packet[])">
            <summary>
            new
            </summary>
            <param name="beforeState"></param>
            <param name="packets"></param>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Utils.ConsistentHashContainer`1">
            <summary>
            一致性哈希container
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            new
            </summary>
            <param name="source"></param>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.Get(System.UInt32)">
            <summary>
            Given an item key hash, 
            this method returns the Server which is closest on the server key continuum.
            </summary>
            <param name="consistentKey"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.Get(System.Byte[])">
            <summary>
            get
            </summary>
            <param name="consistentKey"></param>
            <returns></returns>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.FNV1_32">
            <summary>
            Fowler-Noll-Vo hash, variant 1, 32-bit version.
            http://www.isthe.com/chongo/tech/comp/fnv/
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.FNV1_32.hash">
            <summary>
            hash
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.FNV1_32.#ctor">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.FNV1_32.Initialize">
            <summary>
            init
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.FNV1_32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            hashcore
            </summary>
            <param name="array"></param>
            <param name="ibStart"></param>
            <param name="cbSize"></param>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.FNV1_32.HashFinal">
            <summary>
            hash final
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.ModifiedFNV1_32">
            <summary>
            Modified Fowler-Noll-Vo hash, 32-bit version.
            http://home.comcast.net/~bretm/hash/6.html
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.ModifiedFNV1_32.HashFinal">
            <summary>
            hashFinal.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Utils.Date">
            <summary>
            关于时间的一些操作
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.Utils.Date.unixEpoch">
            <summary>
            unix下的纪元时间
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.Utils.Date.dateTimeMaxValueMillisecondsSinceEpoch">
            <summary>
            the max milliseconds since epoch.
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.SocketBase.Utils.Date.UtcNow">
            <summary>
            Gets the current utc time in an optimized fashion.
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.Date.ToUniversalTime(System.DateTime)">
            <summary>
            Converts a DateTime to UTC (with special handling for MinValue and MaxValue).
            </summary>
            <param name="dateTime">A DateTime.</param>
            <returns>The DateTime in UTC.</returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.Date.ToMillisecondsSinceEpoch(System.DateTime)">
            <summary>
            Converts a DateTime to number of milliseconds since Unix epoch.
            </summary>
            <param name="dateTime">A DateTime.</param>
            <returns>Number of seconds since Unix epoch.</returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.Date.ToSecondsSinceEpoch(System.DateTime)">
            <summary>
            Converts a DateTime to number of seconds since Unix epoch.
            </summary>
            <param name="dateTime">A DateTime.</param>
            <returns>Number of seconds since Unix epoch.</returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.Date.ToDateTimeFromMillisecondsSinceEpoch(System.Int64)">
            <summary>
            Converts from number of milliseconds since Unix epoch to DateTime.
            </summary>
            <param name="millisecondsSinceEpoch">The number of milliseconds since Unix epoch.</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.Date.ToDateTimeFromSecondsSinceEpoch(System.Int64)">
            <summary>
            Converts from number of seconds since Unix epoch to DateTime.
            </summary>
            <param name="secondsSinceEpoch">The number of seconds since Unix epoch.</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.Date.ToLocalTime(System.DateTime,System.DateTimeKind)">
            <summary>
            Converts a DateTime to local time (with special handling for MinValue and MaxValue).
            </summary>
            <param name="dateTime">A DateTime.</param>
            <param name="kind">A DateTimeKind.</param>
            <returns>The DateTime in local time.</returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.Date.SpecifyKind(System.DateTime,System.DateTimeKind)">
            <summary>
            SpecifyKind
            </summary>
            <param name="dt"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Utils.IPUtility">
            <summary>
            ip utility
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.Utils.IPUtility.ipABegin">
            <summary>
            A类: 10.0.0.0-10.255.255.255
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.Utils.IPUtility.ipAEnd">
            <summary>
            A类: 10.0.0.0-10.255.255.255
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.Utils.IPUtility.ipBBegin">
            <summary>
            B类: 172.16.0.0-172.31.255.255   
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.Utils.IPUtility.ipBEnd">
            <summary>
            B类: 172.16.0.0-172.31.255.255   
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.Utils.IPUtility.ipCBegin">
            <summary>
            C类: 192.168.0.0-192.168.255.255
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.SocketBase.Utils.IPUtility.ipCEnd">
            <summary>
            C类: 192.168.0.0-192.168.255.255
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.IPUtility.#cctor">
            <summary>
            static new
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.IPUtility.ConvertToNumber(System.String)">
            <summary>
            ipaddress convert to long
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.IPUtility.ConvertToNumber(System.Net.IPAddress)">
            <summary>
            ipaddress convert to long
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.IPUtility.IsIntranet(System.String)">
            <summary>
            true表示为内网IP
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.IPUtility.IsIntranet(System.Net.IPAddress)">
            <summary>
            true表示为内网IP
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.IPUtility.IsIntranet(System.Int64)">
            <summary>
            true表示为内网IP
            </summary>
            <param name="longIP"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.IPUtility.GetLocalIntranetIP">
            <summary>
            获取本机内网IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.IPUtility.GetLocalIntranetIPList">
            <summary>
            获取本机内网IP列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Utils.NetworkBitConverter">
            <summary>
            network bit converter.
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.NetworkBitConverter.GetBytes(System.Int16)">
            <summary>
            以网络字节数组的形式返回指定的 16 位有符号整数值。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.NetworkBitConverter.GetBytes(System.Int32)">
            <summary>
            以网络字节数组的形式返回指定的 32 位有符号整数值。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.NetworkBitConverter.GetBytes(System.Int64)">
            <summary>
            以网络字节数组的形式返回指定的 64 位有符号整数值。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.NetworkBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            返回由网络字节数组中指定位置的两个字节转换来的 16 位有符号整数。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.NetworkBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            返回由网络字节数组中指定位置的四个字节转换来的 32 位有符号整数。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.NetworkBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            返回由网络字节数组中指定位置的八个字节转换来的 64 位有符号整数。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Utils.ReflectionHelper">
            <summary>
            反射帮助类。
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.ReflectionHelper.GetImplementObjects``1(System.Reflection.Assembly)">
            <summary>
            获取实现了指定类口类型的基类实例。
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <param name="assembly">指定的程序集</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assembly is null</exception>
        </member>
        <member name="T:Sodao.FastSocket.SocketBase.Utils.TaskEx">
            <summary>
            task ex
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.SocketBase.Utils.TaskEx.Delay(System.Int32)">
            <summary>
            delay
            </summary>
            <param name="dueTime"></param>
        </member>
    </members>
</doc>
